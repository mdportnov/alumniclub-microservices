# Common Profile

debug: true

server:
  port: ${MAIN_APP_PORT:8081}
  forward-headers-strategy: framework
  servlet:
    context-path: /api
  error:
    whitelabel:
      enabled: false

# Spring

spring:
  profiles:
    active: dev

  cache:
    type: redis

  devtools:
    restart:
      log-condition-evaluation-delta: false
      enabled: false  # Set to enable hot deployment
  mvc:
    throw-exception-if-no-handler-found: true # to handle and map errors with NoHandlerFoundExceptionHandler
  web:
    resources:
      add-mappings: false
  main:
    banner-mode: off

  datasource:
    url: jdbc:mysql://${DB_HOST:localhost}:${DB_PORT:3307}/${DB_NAME:AlumniClubDev}?createIfNotExists=true
    username: ${MYSQL_USER:admin}
    password: ${MYSQL_PASSWORD:password}

  servlet:
    multipart:
      max-request-size: 16MB # overall multipart request size
      max-file-size: 16MB # one file size per request

  autoconfigure:
    exclude: org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration

  jpa:
    show-sql: true
    format-sql: true
    generate-ddl: true
    hibernate:
      naming:
        physical-strategy: org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
      ddl-auto: none
    properties:
      hibernate:
        show_sql: true
        format_sql: true
        dialect: org.hibernate.dialect.MySQL5InnoDBDialect
        ddl-auto: none

  security:
    jwt:
      secret: ${JWT_SECRET:secret}
      refresh.lifetime: 60 # days
      access.lifetime: 1
    email:
      unsubscribe-secret: ${UNSUBSCRIBE_BROADCAST_SECRET:secret}

  redis:
    host: ${REDIS_HOST:localhost}
    port: ${REDIS_PORT:6379}
    connect-timeout: 50

# RabbitMQ

rabbitmq:
  host: ${RABBIT_HOST:localhost}
  port: ${RABBIT_PORT:5672}
  username: ${RABBITMQ_DEFAULT_USER:admin}
  password: ${RABBITMQ_DEFAULT_PASS:password}
  replyTimeout: 60000

# Actuator

management:
  endpoints:
    web:
      base-path: /actuator
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always
      enabled: true
    info:
      enabled: true
  metrics:
    export:
      prometheus:
        enabled: true
    distribution:
      percentiles-histogram:
        "[http.server.requests]": true

# API Documentation

springdoc:
  swagger-ui:
    path: /swagger
    enabled: ${ALLOW_SWAGGER_UI:false}
  api-docs:
    enabled: ${ALLOW_SWAGGER_UI:false}

# Logging

logging:
  file.name: "app"
  path.main: "./logs"
  pattern:
    file: "[%d{yyyy-MM-dd HH:mm:ss.SSS}] %-5level [%t] [%logger - %line]: %m%n"
    console: "[%boldWhite(%d{YYYY-MM-dd HH:mm:ss.SSS})] [%X{userId} %X{requestId}] [%thread] %cyan(%-5level) %yellow(%logger{36}) - %msg%n"
  level:
    org.springframework: INFO
    org.hibernate: INFO
    root: INFO
    org.springframework.web.client.RestTemplate: OFF

# Custom properties

redis:
  cacheTTL: 86400

swagger:
  swaggerLogin: ${SWAGGER_LOGIN:admin}
  swaggerPassword: ${SWAGGER_PASSWORD:password}

# Auth /api/actuator/prometheus
actuator:
  login: ${ACTUATOR_ADMIN_LOGIN:admin}
  password: ${ACTUATOR_ADMIN_PASSWORD:password}

feature-toggle:
  featureState:
    registration: true
    verifyEmail: false
    sendForms: true
    registrationLimiter: true
  featureDescription:
    registration: Регистрация пользователей
    verifyEmail: Подтверждение регистрации по email
    sendForms: Отправка анкет
    registrationLimiter: Выключение регистрации при большом кол-ве запросов

verifyEmail:
  tokenTtl: 60  # minutes

storage:
  image:
    criticalSize: 1MB
    maxSizeUser: 5MB
    maxSizeAdmin: 15MB
    maxStoredSize: 3MB

registration-limiter:
  deltaTime: 10
  deltaCount: 40

push:
  huawei:
    appId: ${HUAWEI_APP_ID:100000}
    appSecret: ${HUAWEI_APP_SECRET:secret}

urls:
  baseUrl: ${SITE_URL:alumni-dev.mephi.ru}

api:
  versions:
    minSupportedClientVersion: 1.1.0

recommendation-service:
  host: ${RECOMMENDATION_SERVICE_HOST:localhost}
  port: ${RECOMMENDATION_SERVICE_PORT:8085}
